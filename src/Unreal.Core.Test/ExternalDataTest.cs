using System.IO;
using Unreal.Core.Test.Mocks;
using Xunit;

namespace Unreal.Core.Test;

public class ExternalDataTest
{
    [Theory]
    [InlineData(new byte[] {
        0xB1, 0x02, 0x39, 0x06, 0x19, 0xFB, 0x01, 0xF6, 0xFF, 0xFF, 0xFF, 0x13,
        0x5F, 0x19, 0x00, 0x50, 0x00, 0x63, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61,
        0x00, 0x60, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x81, 0x02, 0x69, 0x06, 0x19,
        0xFB, 0x01, 0x11, 0x00, 0x00, 0x00, 0x5E, 0x68, 0x66, 0x71, 0x6C, 0x1E,
        0x68, 0x65, 0x5E, 0x6E, 0x1F, 0x73, 0x5A, 0x65, 0x6A, 0x6E, 0x00, 0x21,
        0x02, 0x85, 0x04, 0x19, 0xFB, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x41, 0x72,
        0x72, 0x63, 0x73, 0x75, 0x3E, 0x6C, 0x70, 0x66, 0x00, 0x41, 0x02, 0x79,
        0x04, 0x19, 0xFB, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x41, 0x6C, 0x60, 0x63,
        0x68, 0x6C, 0x5C, 0x72, 0x71, 0x63, 0x72, 0x70, 0x00, 0x51, 0x02, 0xF1,
        0x06, 0x19, 0xFB, 0x01, 0xF9, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x78, 0x00,
        0x6C, 0x00, 0x3C, 0x04, 0x68, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x21, 0x02,
        0x21, 0x08, 0x19, 0xFB, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x41, 0x41, 0x4F,
        0x48, 0x59, 0x56, 0x53, 0x30, 0x31, 0x31, 0x00, 0x41, 0x02, 0x41, 0x04,
        0x19, 0xFB, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x6F, 0x54,
        0x68, 0x65, 0x4F, 0x63, 0x65, 0x61, 0x6E, 0x00, 0x71, 0x02, 0x7D, 0x08,
        0x19, 0xFB, 0x01, 0x10, 0x00, 0x00, 0x00, 0x5E, 0x64, 0x6A, 0x6F, 0x63,
        0x6D, 0x20, 0x5F, 0x6C, 0x6E, 0x6A, 0x5C, 0x6D, 0x34, 0x38, 0x00, 0xF0,
        0xAD, 0x08, 0x19, 0xFB, 0x01, 0x08, 0x00, 0x00, 0x00, 0x3B, 0x62, 0x61,
        0x26, 0x50, 0x28, 0x33, 0x00, 0x00
    })]
    [InlineData(new byte[] { 0x00 })]
    public void ReadExternalDataTest(byte[] rawData)
    {
        using var stream = new MemoryStream(rawData);
        using var archive = new Unreal.Core.BinaryReader(stream);
        var reader = new MockReplayReader();
        reader.ReadExternalData(archive);
        Assert.True(archive.AtEnd());
        Assert.False(archive.IsError);
    }
}
