using System.IO;
using Xunit;

namespace Unreal.Core.Test;

public class BinaryReaderTest
{
    [Theory]
    [InlineData(new byte[] {
        0x00, 0x06, 0x00, 0x00, 0x00, 0x4C, 0x65, 0x76,
        0x65, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00
    })]
    [InlineData(new byte[] {
        0x01, 0xAF, 0x02
    })]
    [InlineData(new byte[] {
        0x00, 0xE9, 0xFF, 0xFF, 0xFF, 0x57, 0x00, 0x61,
        0x00, 0x73, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72,
        0x00, 0x74, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70,
        0x00, 0x6C, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61,
        0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x46,
        0x00, 0x6C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    })]
    public void StaticParseNameTest(byte[] rawData)
    {
        using var stream = new MemoryStream(rawData);
        using var archive = new BinaryReader(stream)
        {
            EngineNetworkVersion = Models.Enums.EngineNetworkVersionHistory.HISTORY_FAST_ARRAY_DELTA_STRUCT
        };
        archive.ReadFName();
        Assert.True(archive.AtEnd());
        Assert.False(archive.IsError);
    }

    [Theory]
    [InlineData(new byte[] {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    })]
    [InlineData(new byte[] {
        0x40, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x00, 0xA0, 0x04, 0x37, 0x70, 0xA5, 0x00, 0x06,
        0x69, 0x5E, 0x47, 0x89, 0x70, 0xF3, 0x6A, 0x84,
        0xA2, 0x4A, 0x90, 0xC6, 0x07, 0x80, 0x20, 0x10,
        0x15, 0x38, 0x40, 0x11, 0xAB, 0x41, 0x40, 0x00,
    })]
    public void ReadFTransformTest(byte[] rawData)
    {
        using var stream = new MemoryStream(rawData);
        using var archive = new BinaryReader(stream);

        archive.ReadFTransfrom();

        Assert.True(archive.AtEnd());
        Assert.False(archive.IsError);
    }
}
