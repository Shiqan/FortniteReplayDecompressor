using FortniteReplayReader.Models;
using FortniteReplayReader.Test.Mocks;
using System.IO;
using Unreal.Core.Exceptions;
using Unreal.Core.Models;
using Unreal.Core.Models.Enums;
using Xunit;

namespace FortniteReplayReader.Test;

public class EventTest
{
    [Theory]
    [InlineData(new byte[] {
        0x33, 0x00, 0x00, 0x00, 0x55, 0x6E, 0x73, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65,
        0x70, 0x6C, 0x61, 0x79, 0x2D, 0x32, 0x30, 0x31, 0x39, 0x2E, 0x31, 0x31, 0x2E,
        0x31, 0x38, 0x2D, 0x32, 0x30, 0x2E, 0x33, 0x36, 0x2E, 0x31, 0x33, 0x5F, 0x41,
        0x74, 0x68, 0x65, 0x6E, 0x61, 0x4D, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
        0x74, 0x73, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x41, 0x74, 0x68, 0x65, 0x6E, 0x61,
        0x52, 0x65, 0x70, 0x6C, 0x61, 0x79, 0x42, 0x72, 0x6F, 0x77, 0x73, 0x65, 0x72,
        0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x11, 0x00, 0x00, 0x00, 0x41, 0x74,
        0x68, 0x65, 0x6E, 0x61, 0x4D, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
        0x73, 0x00, 0x64, 0x38, 0x14, 0x00, 0x64, 0x38, 0x14, 0x00, 0x30, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xD7, 0x23, 0x3E, 0x05, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x60, 0x3C, 0x00, 0x00, 0xED, 0x08,
        0x00, 0x00, 0xAA, 0x05, 0x00, 0x00, 0x78, 0x48, 0x05, 0x00
    })]
    [InlineData(new byte[] {
        0x2C, 0x00, 0x00, 0x00, 0x55, 0x6E, 0x73, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65,
        0x70, 0x6C, 0x61, 0x79, 0x2D, 0x32, 0x30, 0x31, 0x39, 0x2E, 0x31, 0x31, 0x2E,
        0x31, 0x38, 0x2D, 0x32, 0x30, 0x2E, 0x33, 0x36, 0x2E, 0x31, 0x33, 0x5F, 0x52,
        0x65, 0x70, 0x6C, 0x61, 0x79, 0x4B, 0x65, 0x79, 0x00, 0x19, 0x00, 0x00, 0x00,
        0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6E,
        0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x4B, 0x65, 0x79, 0x00, 0x19,
        0x00, 0x00, 0x00, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
        0x65, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x4B, 0x65,
        0x79, 0x00, 0x12, 0x38, 0x14, 0x00, 0x12, 0x38, 0x14, 0x00, 0x20, 0x00, 0x00,
        0x00, 0xBE, 0x0E, 0xF3, 0x3D, 0xD2, 0x95, 0x0C, 0x3F, 0xE7, 0xDD, 0x05, 0x3F,
        0xDA, 0xBE, 0x31, 0x3F, 0x4A, 0xDC, 0x5B, 0x3F, 0xB7, 0xA0, 0x02, 0x3E, 0x64,
        0xE8, 0x2C, 0x3F, 0xF0, 0x87, 0x83, 0x3E
    })]
    public void ReadEventTest(byte[] rawData)
    {
        using var stream = new MemoryStream(rawData);
        using var archive = new Unreal.Core.BinaryReader(stream);
        var reader = new MockReplayReader();
        reader.SetReplay(new FortniteReplay()
        {
            Info = new ReplayInfo()
            {
                IsEncrypted = false
            }
        });
        reader.ReadEvent(archive);

        Assert.True(archive.AtEnd());
        Assert.False(archive.IsError);
    }

    [Fact]
    public void ReadEventTestThrows()
    {
        byte[] rawData = {
            0x43, 0x00, 0x00, 0x00, 0x55, 0x6E, 0x73, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65,
            0x70, 0x6C, 0x61, 0x79, 0x2D, 0x32, 0x30, 0x31, 0x39, 0x2E, 0x31, 0x31, 0x2E,
            0x31, 0x38, 0x2D, 0x32, 0x30, 0x2E, 0x33, 0x36, 0x2E, 0x31, 0x33, 0x5F, 0x42,
            0x43, 0x35, 0x38, 0x32, 0x44, 0x44, 0x41, 0x34, 0x42, 0x42, 0x31, 0x43, 0x38,
            0x45, 0x34, 0x30, 0x37, 0x36, 0x32, 0x46, 0x31, 0x39, 0x39, 0x38, 0x45, 0x43,
            0x44, 0x44, 0x43, 0x34, 0x30, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x70, 0x6C, 0x61,
            0x79, 0x65, 0x72, 0x45, 0x6C, 0x69, 0x44, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x76,
            0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74,
            0x00, 0x66, 0xD3, 0x13, 0x00, 0x66, 0xD3, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        using var stream = new MemoryStream(rawData);
        using var archive = new Unreal.Core.BinaryReader(stream)
        {
            EngineNetworkVersion = EngineNetworkVersionHistory.HISTORY_JITTER_IN_HEADER
        };
        var reader = new MockReplayReader();
        reader.SetReplay(new FortniteReplay()
        {
            Info = new ReplayInfo()
            {
                IsEncrypted = false
            }
        });
        reader.SetMode(ParseMode.Debug);

        Assert.Throws<UnknownEventException>(() => reader.ReadEvent(archive));

        archive.Reset();
        reader.SetMode(ParseMode.Normal);

        var exception = Record.Exception(() => reader.ReadEvent(archive));
        Assert.Null(exception);
    }
}
